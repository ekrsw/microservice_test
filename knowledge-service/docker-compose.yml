services:
  knowledge-service:
    container_name: knowledge-service
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: always
    env_file:
      - .env
    environment:
      KNOWLEDGE_SERVICE_EXTERNAL_PORT: ${KNOWLEDGE_SERVICE_EXTERNAL_PORT}
      KNOWLEDGE_SERVICE_INTERNAL_PORT: ${KNOWLEDGE_SERVICE_INTERNAL_PORT}
      KNOWLEDGE_POSTGRES_EXTERNAL_PORT: ${KNOWLEDGE_POSTGRES_EXTERNAL_PORT}
      KNOWLEDGE_POSTGRES_INTERNAL_PORT: ${KNOWLEDGE_POSTGRES_INTERNAL_PORT}
    depends_on:
      knowledge-db:
        condition: service_healthy
    ports:
      - "${KNOWLEDGE_SERVICE_EXTERNAL_PORT}:${KNOWLEDGE_SERVICE_INTERNAL_PORT}"
    expose:
      - "${KNOWLEDGE_SERVICE_INTERNAL_PORT}"
    volumes:
      - ./app:/workdir/app
      - ./alembic:/workdir/alembic
      - ./alembic.ini:/workdir/alembic.ini
      - ./tests:/workdir/tests
    networks:
      - knowledge-network  
  knowledge-db:
    image: postgres:17.4-alpine
    container_name: knowledge-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${KNOWLEDGE_POSTGRES_DB}
      POSTGRES_USER: ${KNOWLEDGE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KNOWLEDGE_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
      TZ: ${TZ}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KNOWLEDGE_POSTGRES_USER} -d ${KNOWLEDGE_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - knowledge_data:/var/lib/postgresql/data
    ports:
      - "${KNOWLEDGE_POSTGRES_EXTERNAL_PORT:-5433}:${KNOWLEDGE_POSTGRES_INTERNAL_PORT}"
    expose:
      - "${KNOWLEDGE_POSTGRES_INTERNAL_PORT}"
    networks:
      - knowledge-network
networks:
  user-network:
    name: knowledge-network
    driver: bridge
volumes:
  knowledge_data: